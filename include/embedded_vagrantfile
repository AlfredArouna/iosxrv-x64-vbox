# -*- mode: ruby -*-
# vi: set ft=ruby :

# Embedded Vagranfile that will be included in the base box.
# Other Vagrantfiles must be compatible and will be additive

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.synced_folder '.', '/vagrant', disabled: true

  # Give IOS XRv (64-bit) 400 seconds to come up
  config.vm.boot_timeout = 400

  # Internal network for GE interfaces.
  # config.vm.network "private_network", type: "dhcp"

  # 57722 is the operns_sshd (22 is XR)
  config.vm.network :forwarded_port, guest: 57722, host: 2222, auto_correct: true
  config.vm.network :forwarded_port, guest: 22, host: 2223, id: 'ssh', auto_correct: true
  config.ssh.forward_agent = true
  config.ssh.guest_port = 57722

  # Avoid serial port conflicts
  config.vm.provider 'virtualbox' do |v|
    # Optional, forward the XR console serial port a TCP port on the host
    v.customize ['modifyvm', :id, '--uart1', '0x3F8', 4, '--uartmode1', 'disconnected']
    # Optional, forward the XR auxiliary serial  port a TCP port on the host
    v.customize ['modifyvm', :id, '--uart2', '0x2F8', 3, '--uartmode2', 'disconnected']
  end

  # Ping to test connection to outside world, using DOGFOOD as a marker
  config.vm.provision :shell, :inline => '/bin/ping -c 1 -p C15C0D06F00D cisco.com &> /dev/null && echo online >> /tmp/state.txt || echo offline >> /tmp/state.txt'

  # A nslookup to register with opendns - this will fail as it's a dummy domain but will be markable
  config.vm.provision :shell, :inline => "nslookup #{SecureRandom.uuid}.iosxrv-x64.cisco.com 208.67.222.222 &>> /dev/null && echo nslookup_s >> /tmp/state.txt || echo nslookup_f >> /tmp/state.txt"

  config.vm.post_up_message = "
    Welcome to the IOS XRv (64-bit) Virtualbox.
    To connect to the XR Linux shell, use: 'vagrant ssh'.
    To ssh to the XR Console, use: 'vagrant port' (vagrant version > 1.8)
    to determine the port that maps to guestport 22,
    then: 'ssh vagrant@localhost -p <forwarded port>'

    IMPORTANT:  READ CAREFULLY
    The Software is subject to and governed by the terms and conditions
    of the End User License Agreement and the Supplemental End User
    License Agreement accompanying the product, made available at the
    time of your order, or posted on the Cisco website at
    www.cisco.com/go/terms (collectively, the 'Agreement').
    As set forth more fully in the Agreement, use of the Software is
    strictly limited to internal use in a non-production environment
    solely for demonstration and evaluation purposes. Downloading,
    installing, or using the Software constitutes acceptance of the
    Agreement, and you are binding yourself and the business entity
    that you represent to the Agreement. If you do not agree to all
    of the terms of the Agreement, then Cisco is unwilling to license
    the Software to you and (a) you may not download, install or use the
    Software, and (b) you may return the Software as more fully set forth
    in the Agreement."

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # . This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   sudo apt-get update
  #   sudo apt-get install -y apache2
  # SHELL
end
